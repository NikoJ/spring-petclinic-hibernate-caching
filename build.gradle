import io.qameta.allure.gradle.task.AllureReport

buildscript {
    ext {
        testCoverageFile = "$buildDir/jacoco/coverage.exec"
        lombokVersion = '1.18.4'
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE")
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
        classpath "io.qameta.allure:allure-gradle:2.7.0"
    }
}

apply plugin: 'org.sonarqube'

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.qameta.allure'

    allure {
        version = '2.8.1'
        downloadLinkFormat = 'https://dl.bintray.com/qameta/maven/io/qameta/allure/allure-commandline/%s/allure-commandline-%<s.zip'
    }

    task allureAggregatedReport(type: AllureReport) {
        resultsDirs = subprojects.allure.resultsDir
    }

    jacoco {
        toolVersion = "0.8.2"
    }

    group = 'org.springframework.samples.petclinic'
    version = '1.7.0-SNAPSHOT'

    repositories {
        mavenCentral()
        jcenter()
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.qameta.allure'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.1.2.RELEASE")
        }
    }

    dependencies {
        compile 'p6spy:p6spy:3.7.0'
        compile 'org.slf4j:slf4j-api'
        testCompile 'io.qameta.allure:allure-junit5:2.10.0'
        testCompile 'io.qameta.allure:allure-selenide:2.10.0'
        testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
        testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.3.2')
        testImplementation('org.mockito:mockito-junit-jupiter:2.23.0')

        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    }

    sonarqube {
        properties {
            property "sonar.jacoco.reportPaths", testCoverageFile
        }
    }
}

jar {
    enabled = false
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9001"
        property "sonar.projectKey", "sonar:petclinic"
        property "sonar.projectName", "petclinic"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.verbose", "true"
        property "sonar.exclusions", "**/build/generated/**"
        property "sonar.coverage.exclusions", "**/test/*, **/*Entity.java, **/*Dto.java, **/*View.java, **/*Exception.java, **/*Event.java, **/data/**, **/model/**, **/exception/**, **/error/**, **/config/**, **/properties/**, **/meta/**"
    }
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(testCoverageFile)
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/*.exec')
}

tasks['sonarqube'].with {
    dependsOn.clear()
    dependsOn(jacocoMergeTest)
}

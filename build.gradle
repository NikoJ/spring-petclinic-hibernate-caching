buildscript {
    ext {
        dependencyManagementPluginVersion = '1.0.6.RELEASE'
        springBootVersion = '2.1.2.RELEASE'
        sonarqubeVersion = '2.6.2'
        testCoverageFile = "$buildDir/jacoco/coverage.exec"
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.18"
    }
}

apply plugin: 'org.sonarqube'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

allprojects {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.2"
    }

    group = 'org.springframework.samples.petclinic'
    version = '1.6.0-SNAPSHOT'

    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "net.ltgt.apt"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }

    dependencies {
        compile 'org.projectlombok:lombok'
        compile 'p6spy:p6spy:3.7.0'
        compile 'org.slf4j:slf4j-api'

        annotationProcessor 'org.projectlombok:lombok'
    }

    sonarqube {
        properties {
            property "sonar.jacoco.reportPaths", testCoverageFile
        }
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9001"
        property "sonar.projectKey", "sonar:petclinic"
        property "sonar.projectName", "petclinic"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.verbose", "true"
        property "sonar.exclusions", "**/build/generated/**"
        property "sonar.coverage.exclusions", "**/test/*, **/*Entity.java, **/*Dto.java, **/*View.java, **/*Exception.java, **/*Event.java, **/data/**, **/model/**, **/exception/**, **/error/**, **/config/**, **/properties/**, **/meta/**"
    }
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(testCoverageFile)
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/*.exec')
}

tasks['sonarqube'].with {
    dependsOn.clear()
    dependsOn(jacocoMergeTest)
}
